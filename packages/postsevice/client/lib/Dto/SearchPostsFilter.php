<?php
/**
 * SearchPostsFilter
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ensi\EBSPostClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API ServicesPost
 *
 * APi Post
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: mail@greensight.ru
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ensi\EBSPostClient\Dto;

use \ArrayAccess;
use \Ensi\EBSPostClient\ObjectSerializer;

/**
 * SearchPostsFilter Class Doc Comment
 *
 * @category Class
 * @package  Ensi\EBSPostClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SearchPostsFilter implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SearchPostsFilter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'rating_gte' => 'int',
        'rating_lte' => 'int',
        'user_id' => 'int',
        'tags_like' => 'string',
        'text_like' => 'string',
        'title_like' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'rating_gte' => null,
        'rating_lte' => null,
        'user_id' => null,
        'tags_like' => null,
        'text_like' => null,
        'title_like' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'rating_gte' => false,
        'rating_lte' => false,
        'user_id' => false,
        'tags_like' => false,
        'text_like' => false,
        'title_like' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

        /**
     * Array of property to nullable mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPINullables()
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array
     */
    public function getOpenAPINullablesSetToNull()
    {
        return $this->openAPINullablesSetToNull;
    }

    public function setOpenAPINullablesSetToNull($nullablesSetToNull)
    {
        $this->openAPINullablesSetToNull=$nullablesSetToNull;
        return $this;
    }

    /**
     * Checks if a property is nullable
     *
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        if (isset(self::$openAPINullables[$property])) {
            return self::$openAPINullables[$property];
        }

        return false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        if (in_array($property, $this->getOpenAPINullablesSetToNull())) {
            return true;
        }
        return false;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'rating_gte' => 'rating_gte',
        'rating_lte' => 'rating_lte',
        'user_id' => 'user_id',
        'tags_like' => 'tags_like',
        'text_like' => 'text_like',
        'title_like' => 'title_like'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'rating_gte' => 'setRatingGte',
        'rating_lte' => 'setRatingLte',
        'user_id' => 'setUserId',
        'tags_like' => 'setTagsLike',
        'text_like' => 'setTextLike',
        'title_like' => 'setTitleLike'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'rating_gte' => 'getRatingGte',
        'rating_lte' => 'getRatingLte',
        'user_id' => 'getUserId',
        'tags_like' => 'getTagsLike',
        'text_like' => 'getTextLike',
        'title_like' => 'getTitleLike'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('rating_gte', $data, null);
        $this->setIfExists('rating_lte', $data, null);
        $this->setIfExists('user_id', $data, null);
        $this->setIfExists('tags_like', $data, null);
        $this->setIfExists('text_like', $data, null);
        $this->setIfExists('title_like', $data, null);
    }

    public function setIfExists(string $variableName, $fields, $defaultValue)
    {
        if (is_array($fields) && array_key_exists($variableName, $fields) && is_null($fields[$variableName]) && self::isNullable($variableName)) {
            array_push($this->openAPINullablesSetToNull, $variableName);
        }

        $this->container[$variableName] = isset($fields[$variableName]) ? $fields[$variableName] : $defaultValue;

        return $this;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets rating_gte
     *
     * @return int|null
     */
    public function getRatingGte()
    {
        return $this->container['rating_gte'];
    }

    /**
     * Sets rating_gte
     *
     * @param int|null $rating_gte rating_gte
     *
     * @return $this
     */
    public function setRatingGte($rating_gte)
    {


        /*if (is_null($rating_gte)) {
            throw new \InvalidArgumentException('non-nullable rating_gte cannot be null');
        }*/
        $this->container['rating_gte'] = $rating_gte;

        return $this;
    }

    /**
     * Gets rating_lte
     *
     * @return int|null
     */
    public function getRatingLte()
    {
        return $this->container['rating_lte'];
    }

    /**
     * Sets rating_lte
     *
     * @param int|null $rating_lte rating_lte
     *
     * @return $this
     */
    public function setRatingLte($rating_lte)
    {


        /*if (is_null($rating_lte)) {
            throw new \InvalidArgumentException('non-nullable rating_lte cannot be null');
        }*/
        $this->container['rating_lte'] = $rating_lte;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int|null $user_id user_id
     *
     * @return $this
     */
    public function setUserId($user_id)
    {


        /*if (is_null($user_id)) {
            throw new \InvalidArgumentException('non-nullable user_id cannot be null');
        }*/
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets tags_like
     *
     * @return string|null
     */
    public function getTagsLike()
    {
        return $this->container['tags_like'];
    }

    /**
     * Sets tags_like
     *
     * @param string|null $tags_like tags_like
     *
     * @return $this
     */
    public function setTagsLike($tags_like)
    {


        /*if (is_null($tags_like)) {
            throw new \InvalidArgumentException('non-nullable tags_like cannot be null');
        }*/
        $this->container['tags_like'] = $tags_like;

        return $this;
    }

    /**
     * Gets text_like
     *
     * @return string|null
     */
    public function getTextLike()
    {
        return $this->container['text_like'];
    }

    /**
     * Sets text_like
     *
     * @param string|null $text_like text_like
     *
     * @return $this
     */
    public function setTextLike($text_like)
    {


        /*if (is_null($text_like)) {
            throw new \InvalidArgumentException('non-nullable text_like cannot be null');
        }*/
        $this->container['text_like'] = $text_like;

        return $this;
    }

    /**
     * Gets title_like
     *
     * @return string|null
     */
    public function getTitleLike()
    {
        return $this->container['title_like'];
    }

    /**
     * Sets title_like
     *
     * @param string|null $title_like title_like
     *
     * @return $this
     */
    public function setTitleLike($title_like)
    {


        /*if (is_null($title_like)) {
            throw new \InvalidArgumentException('non-nullable title_like cannot be null');
        }*/
        $this->container['title_like'] = $title_like;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


